/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  GpsData as PrismaGpsData,
  User as PrismaUser,
} from "@prisma/client";

export class GpsDataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.GpsDataCountArgs, "select">): Promise<number> {
    return this.prisma.gpsData.count(args);
  }

  async gpsDataItems(
    args: Prisma.GpsDataFindManyArgs
  ): Promise<PrismaGpsData[]> {
    return this.prisma.gpsData.findMany(args);
  }
  async gpsData(
    args: Prisma.GpsDataFindUniqueArgs
  ): Promise<PrismaGpsData | null> {
    return this.prisma.gpsData.findUnique(args);
  }
  async createGpsData(args: Prisma.GpsDataCreateArgs): Promise<PrismaGpsData> {
    return this.prisma.gpsData.create(args);
  }
  async updateGpsData(args: Prisma.GpsDataUpdateArgs): Promise<PrismaGpsData> {
    return this.prisma.gpsData.update(args);
  }
  async deleteGpsData(args: Prisma.GpsDataDeleteArgs): Promise<PrismaGpsData> {
    return this.prisma.gpsData.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.gpsData
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
